package com.evoMusic.model.geneticAlgorithm.rating;

import java.util.List;

import jm.music.data.Note;
import jm.music.data.Phrase;
import com.evoMusic.model.Song;
import com.evoMusic.util.Sort;

public class NoSilenceRater extends SubRater {
    public NoSilenceRater(double weight){
        this.setWeight(weight);
    }
    
    /**
     * This rater rates the amount of silence in a song, this includes silence between 
     * phrases and silence generated by only rest notes played tohether
     */
    @Override
    public double rate(Song song){
        double songDuration = song.getScore().getEndTime();
        double silenceRest = restSilence(song);
        double silencePhrase = phraseSilence(song);
        
        if (silencePhrase + silenceRest > songDuration){
            return 0;
        } else {
            return 1 - (silencePhrase + silenceRest) / songDuration;
        }
    }
    
    /**
     * Check the amount of silence generated by rest notes
     * 
     * @param song
     * @return
     */
    private double restSilence(Song song){
        double silence = 0;
        double duration = 0;
        boolean firstIteration = true;
        
        for (List<Note> simNotes : Sort.getSortedNoteList(song)){
            double tmpDuration = 0;
            boolean allRest = true;
            double startTime = 0;
            for (Note n : simNotes){
                Phrase thisPhrase = n.getMyPhrase();
                if (!n.isRest()){
                    startTime =
                            thisPhrase.getStartTime() + 
                            thisPhrase.getNoteStartTime(thisPhrase.getNoteList().indexOf(n));
                    
                    allRest = false;
                    if (n.getDuration() > tmpDuration){
                        tmpDuration = n.getDuration();
                    }
                }
            }
            
            if(!allRest){ 
                if (firstIteration){
                    firstIteration = false;
                    duration = startTime + tmpDuration;
                } else if (startTime > duration){
                    silence += startTime - duration;
                    duration = startTime + tmpDuration;
                } else if (startTime == duration){
                    duration = startTime + tmpDuration;
                }
            }
        }

        return silence;
    }

    /**
     * Check the amount of silence generated between phrases
     * 
     * @param song
     * @return
     */
    private double phraseSilence(Song song) {
        List<Phrase> allPhrases = Sort.sortPhrases(song, Sort.PHRASE_START_TIME_COMPARATOR);
        double longestSilence = 0.0;
        
        for (int i = 0; i < allPhrases.size()-1; i++){
            Phrase thisPhrase = allPhrases.get(i);
            Phrase nextPhrase = allPhrases.get(i+1);
            double silenceInterval = nextPhrase.getStartTime() - thisPhrase.getEndTime();
            
            if (silenceInterval > longestSilence){
                longestSilence = silenceInterval;
            }
        }
        
        return longestSilence;
    }
}

        